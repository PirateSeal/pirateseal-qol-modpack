name: Build Factorio Modpack Zip

on:
  push:
    branches: [ master, main ]
    tags:
      - "v*.*.*"   # e.g. v1.0.0
  workflow_dispatch: {}

jobs:
  build-zip:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure jq and zip are available
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip rsync

      - name: Read name and version from info.json
        id: meta
        run: |
          if [ ! -f info.json ]; then
            echo "❌ info.json not found at repo root."
            exit 1
          fi
          NAME=$(jq -r '.name' info.json)
          VERSION=$(jq -r '.version' info.json)

          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "📦 Mod: $NAME"
          echo "🏷️ Version: $VERSION"

      - name: Stage files in proper folder name
        run: |
          MOD_DIR="${{ steps.meta.outputs.name }}_${{ steps.meta.outputs.version }}"
          mkdir -p staging/"$MOD_DIR"
          rsync -av \
            --exclude '.git*' \
            --exclude '.github' \
            --exclude '.vscode' \
            --exclude '.idea' \
            --exclude 'dist' \
            ./ "staging/$MOD_DIR/"

      - name: Create zip
        run: |
          mkdir -p dist
          pushd staging >/dev/null
          zip -r "../dist/${{ steps.meta.outputs.name }}_${{ steps.meta.outputs.version }}.zip" "${{ steps.meta.outputs.name }}_${{ steps.meta.outputs.version }}"
          popd >/dev/null
          ls -lah dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.name }}_${{ steps.meta.outputs.version }}
          path: dist/${{ steps.meta.outputs.name }}_${{ steps.meta.outputs.version }}.zip
          if-no-files-found: error

  release:
    needs: build-zip
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-zip.outputs.name }}_${{ needs.build-zip.outputs.version }}
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
